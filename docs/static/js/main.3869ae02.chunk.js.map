{"version":3,"sources":["recipe.module.css","search.module.css","Recipe.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Recipe","title","calories","image","ingredients","nutritions","className","style","recipe","recipe__head","recipe__body","recipe__content","map","ingredient","i","key","recipe__image","src","alt","recipe__foot","nutrition","label","Math","floor","total","App","useState","recipes","setRecipes","search","setSearch","query","setQuery","useEffect","getRecipes","a","fetch","response","json","data","hits","onSubmit","e","preventDefault","placeholder","type","search__input","value","onChange","target","search__btn","ingredientLines","digest","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"gGACAA,EAAOC,QAAU,CAAC,OAAS,uBAAuB,aAAe,6BAA6B,aAAe,6BAA6B,gBAAkB,gCAAgC,cAAgB,8BAA8B,aAAe,+B,gBCAzPD,EAAOC,QAAU,CAAC,OAAS,uBAAuB,cAAgB,8BAA8B,YAAc,8B,qNC6C/FC,EA3CA,SAAC,GAAuD,IAAtDC,EAAqD,EAArDA,MAAOC,EAA8C,EAA9CA,SAAUC,EAAoC,EAApCA,MAAOC,EAA6B,EAA7BA,YAAaC,EAAgB,EAAhBA,WACrD,OACC,yBAAKC,UAAWC,IAAMC,QACrB,yBAAKF,UAAWC,IAAME,cACrB,4BAAKR,IAGN,yBAAKK,UAAWC,IAAMG,cACrB,yBAAKJ,UAAWC,IAAMI,iBACrB,2CAEA,4BACEP,EAAYQ,KAAI,SAACC,EAAYC,GAAb,OAChB,wBAAIC,IAAG,UAAKF,EAAL,YAAmBC,IAAMD,QAKnC,yBAAKP,UAAWC,IAAMS,eACrB,yBAAKC,IAAKd,EAAOe,IAAI,OAIvB,yBAAKZ,UAAWC,IAAMY,cACrB,+CAEA,4BACEd,EAAWO,KAAI,SAACQ,EAAWN,GAC3B,GAAIA,GAAK,EACT,OACC,wBAAIC,IAAG,UAAKK,EAAL,YAAkBN,IACxB,gCAASM,EAAUC,MAAnB,KADD,IACsCC,KAAKC,MAAMH,EAAUI,YAM9D,+CAAqBtB,M,gBCkBVuB,EArDH,WAEX,IAFiB,EAKaC,mBAAS,IALtB,mBAKVC,EALU,KAKDC,EALC,OAMWF,mBAAS,IANpB,mBAMVG,EANU,KAMFC,EANE,OAOSJ,mBAAS,WAPlB,mBAOVK,EAPU,KAOHC,EAPG,KASjBC,qBAAU,WACTC,MACE,CAACH,IAEJ,IAAMG,EAAU,uCAAG,8BAAAC,EAAA,sEACKC,MAAM,mCAAD,OAAoCL,EAApC,mBAZd,WAYc,oBAXb,qCAUG,cACZM,EADY,gBAGCA,EAASC,OAHV,OAGZC,EAHY,OAIlBX,EAAWW,EAAKC,MAJE,2CAAH,qDAgBhB,OACC,yBAAKlC,UAAU,OACd,yBAAKA,UAAU,kBACd,0BAAMmC,SARS,SAAAC,GACjBA,EAAEC,iBACFX,EAASH,IAMoBvB,UAAWC,IAAMsB,QAC3C,2BAAOe,YAAY,kBAAkBC,KAAK,OAAOvC,UAAWC,IAAMuC,cAAeC,MAAOlB,EAAQmB,SAb/E,SAAAN,GACpBZ,EAAUY,EAAEO,OAAOF,UAchB,4BAAQzC,UAAWC,IAAM2C,YAAaL,KAAK,UAA3C,WAGAlB,EAAQf,KAAI,SAACJ,EAAQM,GAAT,OACZ,kBAAC,EAAD,CACCC,IAAG,UAAKP,EAAOA,OAAOa,OAAnB,OAA2BP,GAC9Bb,MAAOO,EAAOA,OAAOa,MACrBnB,SAAUoB,KAAKC,MAAMf,EAAOA,OAAON,UACnCC,MAAOK,EAAOA,OAAOL,MACrBC,YAAaI,EAAOA,OAAO2C,gBAC3B9C,WAAYG,EAAOA,OAAO4C,eCtCZC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.3869ae02.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"recipe\":\"recipe_recipe__BdaUe\",\"recipe__head\":\"recipe_recipe__head__wKGZA\",\"recipe__body\":\"recipe_recipe__body__1duRw\",\"recipe__content\":\"recipe_recipe__content__QOUVs\",\"recipe__image\":\"recipe_recipe__image__3vSjC\",\"recipe__foot\":\"recipe_recipe__foot__1INE-\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"search\":\"search_search__2gDMQ\",\"search__input\":\"search_search__input__1UlGR\",\"search__btn\":\"search_search__btn__24Kf9\"};","import React from 'react';\nimport style from './recipe.module.css'\n\nconst Recipe = ({title, calories, image, ingredients, nutritions}) => {\n\treturn (\n\t\t<div className={style.recipe}>\n\t\t\t<div className={style.recipe__head}>\n\t\t\t\t<h1>{title}</h1>\n\t\t\t</div>\n\n\t\t\t<div className={style.recipe__body}>\n\t\t\t\t<div className={style.recipe__content}>\n\t\t\t\t\t<h2>Ingredients</h2>\n\n\t\t\t\t\t<ul>\n\t\t\t\t\t\t{ingredients.map((ingredient, i) => (\n\t\t\t\t\t\t\t<li key={`${ingredient} ${i}`}>{ingredient}</li>\n\t\t\t\t\t\t))}\n\t\t\t\t\t</ul>\n\t\t\t\t</div>\n\n\t\t\t\t<div className={style.recipe__image}>\n\t\t\t\t\t<img src={image} alt=\"\"/>\n\t\t\t\t</div>\n\t\t\t</div>\n\n\t\t\t<div className={style.recipe__foot}>\n\t\t\t\t<h2>Nutrition facts</h2>\n\n\t\t\t\t<ul>\n\t\t\t\t\t{nutritions.map((nutrition, i) => {\n\t\t\t\t\t\tif (i <= 2)\n\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t<li key={`${nutrition} ${i}`}>\n\t\t\t\t\t\t\t\t<strong>{nutrition.label}:</strong> {Math.floor(nutrition.total)}\n\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t);\n\t\t\t\t\t})}\n\t\t\t\t</ul>\n\n\t\t\t\t<h3>Total calories: {calories}</h3>\n\t\t\t</div>\n\t\t</div>\n\t);\n};\n\nexport default Recipe;\n","import React, {useEffect, useState} from 'react';\nimport './App.css';\nimport Recipe from './Recipe';\nimport style from './search.module.css'\n\nconst App = () => {\n\n\tconst APP_ID = '173df23d';\n\tconst APP_KEY = '45122742ec271df627ec68e9470cee55';\n\n\tconst [recipes, setRecipes] = useState([]);\n\tconst [search, setSearch] = useState('');\n\tconst [query, setQuery] = useState('chicken');\n\n\tuseEffect(() => {\n\t\tgetRecipes();\n\t}, [query]);\n\n\tconst getRecipes = async () => {\n\t\tconst response = await fetch(`https://api.edamam.com/search?q=${query}&app_id=${APP_ID}&app_key=${APP_KEY}`);\n\n\t\tconst data = await response.json();\n\t\tsetRecipes(data.hits);\n\t}\n\n\tconst updateSearch = e => {\n\t\tsetSearch(e.target.value);\n\t}\n\n\tconst getSearch = e => {\n\t\te.preventDefault();\n\t\tsetQuery(search);\n\t}\n\n\treturn (\n\t\t<div className=\"App\">\n\t\t\t<div className=\"App__container\">\n\t\t\t\t<form onSubmit={getSearch} className={style.search}>\n\t\t\t\t\t<input placeholder=\"Search a recipe\" type=\"text\" className={style.search__input} value={search} onChange={updateSearch}/>\n\n\t\t\t\t\t<button className={style.search__btn} type=\"submit\">Search</button>\n\t\t\t\t</form>\n\n\t\t\t\t{recipes.map((recipe, i) => (\n\t\t\t\t\t<Recipe\n\t\t\t\t\t\tkey={`${recipe.recipe.label}${i}`}\n\t\t\t\t\t\ttitle={recipe.recipe.label}\n\t\t\t\t\t\tcalories={Math.floor(recipe.recipe.calories)}\n\t\t\t\t\t\timage={recipe.recipe.image}\n\t\t\t\t\t\tingredients={recipe.recipe.ingredientLines}\n\t\t\t\t\t\tnutritions={recipe.recipe.digest}\n\t\t\t\t\t/>\n\t\t\t\t))}\n\t\t\t</div>\n\t\t</div>\n\t);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}